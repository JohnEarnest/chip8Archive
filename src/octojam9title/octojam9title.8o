#######################################
#
#  Octojam 9 Greetings Program
#
#  Produced for the 2022 Octojam,
#  the world's only CHIP-8 Game jam.
#  Find out more at octojam.com
#
#  by John Earnest
#
#######################################

: main
	# draw a background that has been prepared from a
	# single bitmap sliced into sprite-sized pieces
	# using the EZ-Pack utility:
	# https://beyondloom.com/tools/ezpack.html
	v0 := 16 # x-pos
	v2 := 11 # stride
	i  := background
	loop
		sprite v0 v1 11
		i  += v2
		v1 += v2
		if v1 == 33 then v0 += 8
		if v1 == 33 then v1 := 0
		if v0 != 48 then
	again
	wait-long

	# we could remove this code entirely by "baking"
	# initial letter positions onto the background
	# image, but we have memory to spare, and
	# this adds a bit of visual flair to the
	# startup sequence:
	v2 := 8 # stride
	:macro letter-init X Y {
		v0 := X
		v1 := Y
		sprite v0 v1 8
		wait
		i  += v2
	}
	letter-init 18  2
	letter-init 28  2
	letter-init 38  2
	letter-init 38 12
	letter-init 38 22
	letter-init 28 22
	letter-init 18 22
	wait-long

	:alias letter vd
	loop
		:macro tween Z DR DV {
			# fortunately, this erase-redraw cycle is very fast,
			# and only one object is moving at a time,
			# so we don't have to do anything fancy to reduce flicker:
			sprite v0 v1 8 # erase
			:calc T { Z * DV }
			DR += T
			sprite v0 v1 8 # redraw
			wait
		}
		:macro shift X Y DR DV {
			i  := letters
			v0 := letter # *1
			v0 += v0     # *2
			v0 += v0     # *4
			v0 += v0     # *8
			i  += v0
			v0 := X
			v1 := Y
			tween 2 DR DV # these tween values must sum to 10!
			tween 6 DR DV
			tween 2 DR DV
			letter += 1
			# slots are modulo 8, letters are modulo 7,
			# so the letter positions will shift out of sync
			# with the slots:
			if letter == 7 then letter := 0
			wait
		}
		shift 18  2 v1  1
		shift 28  2 v0 -1
		shift 38  2 v0 -1
		shift 38 12 v1 -1
		shift 38 22 v1 -1
		shift 28 22 v0  1
		shift 18 22 v0  1
		shift 18 12 v1  1
	again

# use fallthrough to share the loop body
# of these two subroutines:
: wait-long
	vf := 20
	delay := vf
: wait
	loop
		vf := delay
		if vf != 0 then
	again
	vf := 3
	delay := vf
;

: background # 11-pixel sprites
	0xFF 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0xFF 0x80 0x80 0x80 0x80 0x80
	0x80 0x80 0x80 0x80 0xFF 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0x80 0xFF 0x00
	0x00 0xFF 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0xFF 0x38 0x30 0x33 0x33
	0x30 0x38 0x3E 0x3C 0x39 0xFF 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0x20 0xFF
	0x00 0x00 0xFF 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0xFF 0x38 0x18 0x98
	0x98 0x18 0x18 0x38 0x78 0xF8 0xFF 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08 0x08
	0xFF 0x00 0x00 0xFE 0x02 0x02 0x02 0x02 0x02 0x02 0x02 0x02 0x02 0xFE 0x02 0x02
	0x02 0x02 0x02 0x02 0x02 0x02 0x02 0xFE 0x02 0x02 0x02 0x02 0x02 0x02 0x02 0x02
	0x02 0xFE 0x00 0x00
: letters # 7x7, padded to 8x8
	0x7C 0xFE 0xC6 0xC6 0xC6 0xFE 0x7C 0x00 # O
	0x7C 0xFE 0xC6 0xC0 0xC6 0xFE 0x7C 0x00 # C
	0xFE 0xFE 0x38 0x38 0x38 0x38 0x38 0x00 # T
	0x7C 0xFE 0xC6 0xC6 0xC6 0xFE 0x7C 0x00 # O
	0xFE 0xFE 0x0C 0x0C 0xCC 0xFC 0x78 0x00 # J
	0x7C 0xFE 0xC6 0xFE 0xFE 0xC6 0xC6 0x00 # A
	0xC6 0xEE 0xFE 0xFE 0xFE 0xD6 0xC6 0x00 # M
